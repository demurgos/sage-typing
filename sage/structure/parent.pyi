u"""
Python interface for the `sage.structure.parent` module.

http://doc.sagemath.org/html/en/reference/structure/sage/structure/parent.html
"""

from typing import Any, Tuple, Union

import sage.structure.category_object

class Parent(sage.structure.category_object.CategoryObject):
    def __init__(self,
                 base,
                 category,
                 element_constructor,
                 gens,
                 names,
                 normalize,
                 facade: Union['Parent', Tuple['Parent'], bool]) -> None: ...

    def __call__(self, x=0, *args, **kwargs) -> Any: ...
    def __contains__(self, x) -> Any: ...
    def __mul__(self, x) -> Any: ...

    def _populate_coercion_lists_(self,
                                  coerce_list,
                                  action_list,
                                  convert_list,
                                  embedding=None,
                                  convert_method_name=None,
                                  element_constructor=None,
                                  init_no_parent=None,
                                  unpickling=False) -> Any: ...
    def _coerce_map_from_(self, S) -> Any: ...
    def _convert_map_from_(self, S) -> Any: ...
    def _get_action_(self, S, op, self_on_left) -> Any: ...
    def _an_element_(self) -> Any: ...
    def _repr_option(self, key) -> Any: ...
    def _init_category_(self, category) -> Any: ...

    def Hom(self, codomain, category=None) -> Any: ...
    def an_element(self) -> Any: ...
    def category(self) -> Any: ...
    def coerce(self, x) -> Any: ...
    def coerce_embedding(self) -> Any: ...
    def coerce_map_from(self, S) -> Any: ...
    def construction(self) -> Any: ...
    def convert_map_from(self, S) -> Any: ...
    def element_class(self) -> Any: ...
    def get_action(self, S, op=None, self_on_left=True, self_el=None, S_el=None) -> Any: ...
    def has_coerce_map_from(self, S) -> Any: ...
    def hom(self, im_gens, codomain=None, check=None) -> Any: ...
    def is_atomic_repr(self) -> Any: ...
    def is_coercion_cached(self, domain) -> Any: ...
    def is_conversion_cached(self, domain) -> Any: ...
    def is_exact(self) -> Any: ...
    def register_action(self, action) -> Any: ...
    def register_coercion(self, mor) -> Any: ...
    def register_conversion(self, mor) -> Any: ...
    def register_embedding(self, embedding) -> Any: ...


class Set_generic(Parent):
    def object(self) -> Any: ...

class Set_PythonType_class(Set_generic):
    def cardinality(self) -> Any: ...
    def object(self) -> Any: ...

def Set_PythonType(theType) -> Any: ...

def is_Parent(x: Any) -> bool: ...
