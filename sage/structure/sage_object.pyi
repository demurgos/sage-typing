# -*- coding: utf8 -*-
u"""
Python interface for the `sage.structure.sage_object` module.

Documentation:
http://doc.sagemath.org/html/en/reference/structure/sage/structure/sage_object.html

Source:
https://github.com/sagemath/sage/blob/master/src/sage/structure/sage_object.pxd
https://github.com/sagemath/sage/blob/master/src/sage/structure/sage_object.pyx
"""


from typing import Any, Callable, Hashable

import sage.typeset.ascii_art


class SageObject(object):
    def _ascii_art_(self) -> sage.typeset.ascii_art.AsciiArt: ...
    def _cache_key(self) -> Hashable: ...

    def category(self): ...
    def db(self, name: str, compress: bool = True): ...
    def dump(self, filename: str, compress: bool = True): ...
    def dumps(self, compress: bool=True) -> str: ...
    def parent(self) -> type: ...
    def rename(self, x: str = None): ...
    def reset_name(self): ...
    def save(self, filename: str = None, compress: bool = True): ...
    def version(self): str

def dumps(obj: Any, compress: bool = True) -> str: ...
def load(compress: bool = True, verbose: bool = True, *filename: str) -> SageObject: ...
def loads(s: str, compress: bool = True) -> SageObject:  ...
def picklejar(obj: Any, dir: str = None): ...
def py_rich_to_bool(op: Any, c: Any) -> bool: ...
def register_unpickle_override(module: str,
                               name: str,
                               callable: Callable,
                               call_name: str = None
                               ) -> None: ...
def save(obj: Any, filename: str = None, compress: bool = True, **kwds: Any): ...
def unpickle_all(dir: str = None, debug: bool = False, run_test_suite:bool = False): ...
def unpickle_global(module: str, name: str) -> Any: ...

op_EQ = ...  # type: Any
op_NE = ...  # type: Any
op_LT = ...  # type: Any
op_LE = ...  # type: Any
op_GT = ...  # type: Any
op_GE = ...  # type: Any
