u"""
Python interface for the `sage.rings.rational` module.

http://doc.sagemath.org/html/en/reference/rings_standard/sage/rings/rational.html
"""

from typing import Any, List, Union

import sage.structure.element
import sage.rings.integer

class Rational(sage.structure.element.FieldElement):
    def absolute_norm(self): ...
    def additive_order(self): ...
    def ceil(self): ...
    def charpoly(self, var): ...
    def conjugate(self): ...
    def content(self, other): ...
    def continued_fraction(self): ...
    def continued_fraction_list(self, type='std'): ...
    def denom(self): ...
    def denominator(self): ...
    def factor(self): ...
    def floor(self): ...
    def gamma(self, prec=None): ...
    def global_height(self, prec=None): ...
    def global_height_arch(self, prec=None): ...
    def global_height_non_arch(self, prec=None): ...
    def height(self): ...
    def imag(self): ...
    def is_S_integral(self, S=...): ...
    def is_S_unit(self, S=None): ...
    def is_integer(self): ...
    def is_integral(self): ...
    def is_norm(self, L, element=False, proof=True): ...
    def is_nth_power(self, n): ...
    def is_one(self): ...
    def is_padic_square(self, p): ...
    def is_perfect_power(self, expected_value=False): ...
    def is_square(self): ...
    def list(self): ...
    def local_height(self, p, prec=None): ...
    def local_height_arch(self, prec=None): ...
    def minpoly(self, var='x'): ...
    def mod_ui(self, n): ...
    def multiplicative_order(self): ...
    def norm(self): ...
    def nth_root(self, n): ...
    def numer(self): ...
    def numerator(self): ...
    def ord(self, p): ...
    def period(self): ...
    def prime_to_S_part(self, S=...): ...
    def real(self): ...
    def relative_norm(self): ...
    def round(self, mode='away'): ...
    def sign(self): ...
    def sqrt(self, prec=None, extend=True, all=False): ...
    def squarefree_part(self): ...
    def str(self, base=10): ...
    def support(self): ...
    def trace(self): ...
    def trunc(self): ...
    def val_unit(self, p): ...
    def valuation(self, p): ...
