u"""
Python interface for the `sage.rings.finite_rings.integer_mod` module.

http://doc.sagemath.org/html/en/reference/finite_rings/sage/rings/finite_rings/integer_mod.html
"""

from typing import Any

import sage.categories.map
import sage.categories.morphism
import sage.rings.finite_rings.element_base


class IntegerMod_hom(sage.categories.morphism.Morphism):
    pass


def IntegerMod(parent, value) -> None: ...

class IntegerMod_abstract(sage.rings.finite_rings.element_base.FiniteRingElement):
    def __init__(self, value, modulus) -> None: ...
    def additive_order(self) -> None: ...
    def centerlift(self, *args, **kwds) -> None: ...
    def charpoly(self, var='x') -> None: ...
    def crt(self, other) -> None: ...
    def generalised_log(self) -> None: ...
    def is_nilpotent(self) -> None: ...
    def is_one(self) -> None: ...
    def is_primitive_root(self) -> None: ...
    def is_square(self) -> None: ...
    def is_unit(self) -> None: ...
    def lift_centered(self) -> None: ...
    def log(self, b=None) -> None: ...
    def minimal_polynomial(self, var='x') -> None: ...
    def minpoly(self, var='x') -> None: ...
    def modulus(self) -> None: ...
    def multiplicative_order(self) -> None: ...
    def norm(self) -> None: ...
    def nth_root(self, n, extend=False, all=False, algorithm=None, cunningham=False) -> None: ...
    def polynomial(self, var='x') -> None: ...
    def rational_reconstruction(self) -> None: ...
    def sqrt(self, extend=True, all=False) -> None: ...
    def square_root(self, extend=True, all=False) -> None: ...
    def trace(self) -> None: ...
    def valuation(self, p) -> None: ...


class IntegerMod_gmp(IntegerMod_abstract):
    def gcd(self, other) -> None: ...
    def is_one(self) -> None: ...
    def is_unit(self) -> None: ...
    def lift(self) -> None: ...


class IntegerMod_int(IntegerMod_abstract):
    def gcd(self, other) -> None: ...
    def is_one(self) -> None: ...
    def is_unit(self) -> None: ...
    def lift(self) -> None: ...
    def sqrt(self, extend=True, all=False) -> None: ...

class IntegerMod_int64(IntegerMod_abstract):
    def gcd(self, other) -> None: ...
    def is_one(self) -> None: ...
    def is_unit(self) -> None: ...
    def lift(self) -> None: ...


class Int_to_IntegerMod(IntegerMod_hom):
    pass


class IntegerMod_to_Integer(sage.categories.map.Map):
    pass


class IntegerMod_to_IntegerMod(IntegerMod_hom):
    pass


class Integer_to_IntegerMod(IntegerMod_hom):
    def  section(self): ...


def Mod(self, n, m, parent=None): ...


class NativeIntStruct(object):
    def precompute_table(self, parent, inverses=True): ...


def is_IntegerMod(x: Any) -> bool: ...

def lucas(k, P, Q=1, n=None): ...

def lucas_q1(mm, P): ...

def makeNativeIntStruct(z): ...

def mod(n, m, parent=None): ...

def slow_lucas(k, P, Q=1): ...

def square_root_mod_prime(a, p=None): ...

def square_root_mod_prime_power(a, p, e): ...
