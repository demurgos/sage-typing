u"""
Python interface for the `sage.rings.finite_rings.integer_mod_ring` module.

http://doc.sagemath.org/html/en/reference/finite_rings/sage/rings/finite_rings/integer_mod_ring.html
"""

from typing import Any, List, Union

import sage.rings.finite_rings.integer_mod
import sage.rings.quotient_ring
import sage.structure.factory


class IntegerModFactory(sage.structure.factory.UniqueFactory):
    def __init__(self, order: Any = 0, is_field: bool = False) -> None: ...
    def create_key_and_extra_args(self, order: Any = 0, is_field: Any = False): ...
    def create_object(self, version: Any, order: Any, **kwds: Any) -> IntegerModRing: ...
    def get_object(self, version: Any, key: Any, extra_args: Any): ...


class IntegerModRing_generic(sage.rings.quotient_ring.QuotientRing_generic):
    def __init__(self, order: Any, cache: Any = None, category: Any = None) -> None: ...
    def __call__(self,
                 *args,
                 **kwargs
                 ) -> sage.rings.finite_rings.integer_mod.IntegerMod_abstract: ...
    def cardinality(self): ...
    def characteristic(self): ...
    def degree(self) -> Any: ...
    def extension(self, poly, name=None, names=None, embedding=None) -> Any: ...
    def factored_order(self) -> Any: ...
    def factored_unit_order(self) -> Any: ...
    def field(self) -> Any: ...
    def is_field(self, proof=None) -> Any: ...
    def is_finite(self) -> Any: ...
    def is_integral_domain(self, proof=None) -> Any: ...
    def is_noetherian(self) -> Any: ...
    def is_prime_field(self) -> Any: ...
    def is_unique_factorization_domain(self, proof=None) -> Any: ...
    def krull_dimension(self) -> Any: ...
    def list_of_elements_of_multiplicative_group(self) -> Any: ...
    def modulus(self) -> Any: ...
    def multiplicative_generator(self) -> Any: ...
    def multiplicative_group_is_cyclic(self) -> Any: ...
    def multiplicative_subgroups(self) -> Any: ...
    def order(self) -> Any: ...
    def quadratic_nonresidue(self) -> Any: ...
    def random_element(self, bound=None) -> Any: ...
    def square_roots_of_one(self) -> Any: ...
    def unit_gens(self, **kwds: Any) -> Any: ...
    def unit_group(self, algorithm='sage') -> Any: ...
    def unit_group_exponent(self) -> Any: ...
    def unit_group_order(self) -> Any: ...


IntegerModRing = IntegerModRing_generic
Integers = IntegerModRing_generic
Zmod = IntegerModRing_generic


def crt(v: Any) -> Any: ...
def is_IntegerModRing(x: Any) -> bool: ...
