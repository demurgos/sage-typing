u"""
Python interface for the `sage.rings.polynomial.polynomial_ring_constructor` module.

http://doc.sagemath.org/html/en/reference/polynomial_rings/sage/rings/polynomial/polynomial_ring_constructor.html
"""

from typing import Any, List, Union, Optional

import sage.rings.ring
import sage.rings.infinity
import sage.rings.polynomial.polynomial_singular_interface


class PolynomialRing_general(sage.rings.ring.Algebra):
    def __init__(self, base_ring, name=None, sparse=False, element_class=None, category=None) -> None: ...
    def base_extend(self, R) -> Any: ...
    def change_ring(self, R) -> Any: ...
    def change_var(self, var) -> Any: ...
    def characteristic(self, ) -> Any: ...
    def completion(self, p, prec=20, extras=None) -> Any: ...
    def construction(self) -> Any: ...
    def cyclotomic_polynomial(self, n) -> Any: ...
    def extend_variables(self, added_names, order='degrevlex') -> Any: ...
    def gen(self, n=0) -> Any: ...
    def gens_dict(self) -> Any: ...
    def is_exact(self) -> Any: ...
    def is_field(self, proof=True) -> Any: ...
    def is_finite(self) -> Any: ...
    def is_integral_domain(self, proof=True) -> Any: ...
    def is_noetherian(self) -> Any: ...
    def is_sparse(self) -> Any: ...
    def is_unique_factorization_domain(self, proof=True) -> Any: ...
    def karatsuba_threshold(self) -> Any: ...
    def krull_dimension(self) -> Any: ...
    def monics(self, of_degree=None, max_degree=None) -> Any: ...
    def ngens(self) -> Any: ...
    def parameter(self) -> Any: ...
    def polynomials(self, of_degree=None, max_degree=None) -> Any: ...
    def random_element(self, degree=(-1, 2), *args, **kwds) -> Any: ...
    def set_karatsuba_threshold(self, Karatsuba_threshold) -> Any: ...
    def some_elements(self) -> Any: ...
    def variable_names_recursive(self, depth=sage.rings.infinity.PlusInfinity) -> Any: ...


class PolynomialRing_commutative(PolynomialRing_general, sage.rings.ring.CommutativeAlgebra):
    def __init__(self, base_ring, name=None, sparse=False, element_class=None, category=None) -> None: ...

    def quotient_by_principal_ideal(self, f, names=None) -> Any: ...
    def weyl_algebra(self) -> Any: ...


class PolynomialRing_dense_mod_n(PolynomialRing_commutative):
    def __init__(self, base_ring, name=None, element_class=None, implementation=None, category=None) -> None: ...
    def modulus(self) -> Any: ...
    def residue_field(self, ideal, names=None) -> Any: ...


class PolynomialRing_integral_domain(PolynomialRing_commutative, sage.rings.ring.IntegralDomain):
    def __init__(self, base_ring, name='x', sparse=False, implementation=None, element_class=None, category=None) -> None: ...


class PolynomialRing_field(PolynomialRing_integral_domain, sage.rings.polynomial.polynomial_singular_interface.PolynomialRing_singular_repr, sage.rings.ring.PrincipalIdealDomain):
    def __init__(self, base_ring, name='x', sparse=False, element_class=None, category=None) -> None: ...
    def divided_difference(self, points, full_table=False) -> Any: ...
    def fraction_field(self) -> Any: ...
    def lagrange_polynomial(self, points, algorithm='divided_difference', previous_row=None) -> Any: ...


class PolynomialRing_dense_finite_field(PolynomialRing_field):
    def __init__(self, base_ring, name='x', element_class=None, implementation=None) -> None: ...
    def irreducible_element(self, n, algorithm=None) -> Any: ...


class PolynomialRing_dense_mod_p(PolynomialRing_dense_finite_field, PolynomialRing_dense_mod_n, sage.rings.polynomial.polynomial_singular_interface.PolynomialRing_singular_repr):
    def __init__(self, base_ring, name='x', implementation=None, category=None) -> None: ...
    def irreducible_element(self, n, algorithm=None) -> Any: ...


class PolynomialRing_cdvr(PolynomialRing_integral_domain):
    def __init__(self, base_ring, name=None, sparse=False, element_class=None, category=None) -> None: ...


class PolynomialRing_dense_padic_ring_generic(PolynomialRing_cdvr):
    def __init__(self, base_ring, name=None, element_class=None, category=None) -> None: ...


class PolynomialRing_cdvf(PolynomialRing_cdvr, PolynomialRing_field):
    def __init__(self, base_ring, name=None, sparse=False, element_class=None, category=None) -> None: ...


class PolynomialRing_dense_padic_field_generic(PolynomialRing_cdvf):
    def __init__(self, base_ring, name=None, element_class=None, category=None) -> None: ...


class PolynomialRing_dense_padic_field_capped_relative(PolynomialRing_dense_padic_field_generic):
    def __init__(self, base_ring, name=None, element_class=None, category=None) -> None: ...


class PolynomialRing_dense_padic_field_lazy(PolynomialRing_dense_padic_field_generic):
    def __init__(self, base_ring, name=None, element_class=None, category=None) -> None: ...


class PolynomialRing_dense_padic_ring_capped_absolute(PolynomialRing_dense_padic_ring_generic):
    def __init__(self, base_ring, name=None, element_class=None, category=None) -> None: ...


class PolynomialRing_dense_padic_ring_capped_relative(PolynomialRing_dense_padic_ring_generic):
    def __init__(self, base_ring, name=None, element_class=None, category=None) -> None: ...


class PolynomialRing_dense_padic_ring_fixed_mod(PolynomialRing_dense_padic_ring_generic):
    def __init__(self, base_ring, name=None, element_class=None, category=None) -> None: ...


class PolynomialRing_dense_padic_ring_lazy(PolynomialRing_dense_padic_ring_generic):
    def __init__(self, base_ring, name=None, element_class=None, category=None) -> None: ...


def is_PolynomialRing(x) -> bool: ...
def polygen(ring_or_element, name='x') -> Any: ...
def polygens(base_ring, names='x') -> Any: ...
