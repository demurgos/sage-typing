u"""
Python interface for the `sage.rings.ring` module.

http://doc.sagemath.org/html/en/reference/rings/sage/rings/ring.html
"""

from typing import Any

import sage.structure.parent_gens


class Ring(sage.structure.parent_gens.ParentWithGens):
    def base_extend(self, R) -> Any: ...
    def cardinality(self) -> Any: ...
    def category(self) -> Any: ...
    def epsilon(self) -> Any: ...
    def ideal(self, *args, **kwds) -> Any: ...
    def ideal_monoid(self) -> Any: ...
    def is_commutative(self) -> Any: ...
    def is_exact(self) -> Any: ...
    def is_field(self, proof=True) -> Any: ...
    def is_finite(self) -> Any: ...
    def is_integral_domain(self, proof=True) -> Any: ...
    def is_noetherian(self) -> Any: ...
    def is_prime_field(self) -> Any: ...
    def is_ring(self) -> Any: ...
    def is_subring(self, other) -> Any: ...
    def one(self) -> Any: ...
    def order(self) -> Any: ...
    def principal_ideal(self, gen, coerce=True) -> Any: ...
    def quo(self, I, names=None) -> Any: ...
    def quotient(self, I, names=None) -> Any: ...
    def quotient_ring(self, I, names=None) -> Any: ...
    def random_element(self, bound=2) -> Any: ...
    def unit_ideal(self) -> Any: ...
    def zero(self) -> Any: ...
    def zero_ideal(self) -> Any: ...
    def zeta(self, n=2, all=False) -> Any: ...
    def zeta_order(self) -> Any: ...


class Algebra(Ring):
    def characteristic(self) -> Any: ...
    def has_standard_involution(self) -> Any: ...


class CommutativeRing(Ring):
    def extension(self, poly, name=None, names=None, embedding=None) -> Any: ...
    def fraction_field(self) -> Any: ...
    def frobenius_endomorphism(self, n=1) -> Any: ...
    def ideal_monoid(self) -> Any: ...
    def is_commutative(self) -> Any: ...
    def krull_dimension(self) -> Any: ...


class NoetherianRing(CommutativeRing):
    def is_noetherian(self) -> Any: ...


class CommutativeAlgebra(CommutativeRing):
    def is_commutative(self) -> Any: ...


class IntegralDomain(CommutativeRing):
    def is_field(self, proof=True) -> Any: ...
    def is_integral_domain(self, proof=True) -> Any: ...
    def is_integrally_closed(self) -> Any: ...


class DedekindDomain(IntegralDomain):
    def integral_closure(self) -> Any: ...
    def is_integrally_closed(self) -> Any: ...
    def is_noetherian(self) -> Any: ...
    def krull_dimension(self) -> Any: ...


class PrincipalIdealDomain(IntegralDomain):
    def class_group(self) -> Any: ...
    def content(self, x, y, coerce=True) -> Any: ...
    def gcd(self, x, y, coerce=True) -> Any: ...
    def is_noetherian(self) -> Any: ...


class EuclideanDomain(PrincipalIdealDomain):
    def parameter(self) -> Any: ...


class Field(PrincipalIdealDomain):
    def algebraic_closure(self) -> Any: ...
    def divides(self, x, y, coerce=True) -> Any: ...
    def fraction_field(self) -> Any: ...
    def ideal(self, *gens, **kwds) -> Any: ...
    def integral_closure(self) -> Any: ...
    def is_field(self, proof=True) -> Any: ...
    def is_integrally_closed(self) -> Any: ...
    def is_noetherian(self) -> Any: ...
    def krull_dimension(self) -> Any: ...
    def prime_subfield(self) -> Any: ...


def is_Ring(x) -> bool: ...
